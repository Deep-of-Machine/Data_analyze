# -*- coding: utf-8 -*-
"""데이터 분석 및 시각화.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yyhs2FDrMANoXpzMBPf2Ts0TpPAuLsAy
"""

import pandas as pd
import matplotlib.pyplot as plt
from google.colab import drive
death = 0
death1 = 0
death2 = 0
death3 = 0
death4 = 0
aver = []
drive.mount('/content/gdrive')
df = pd.read_csv('/content/Deaths per 1,000,000 inhabitants.csv')
display(df)
ind = range(len(df))
for i in range(23):
    death = df['RUS'][i]
    death1 = df['KOR'][i] 
    death2 = df['IND'][i]
    death3 = df['PRT'][i] 
    death4 = df['ISL'][i]
    avdeath = (death + death1 + death2 + death3 + death4)/5
    aver.append(avdeath)
    avdeath = 0
    
plt.title('Road accidents')
plt.plot(ind, df['RUS'], label='Russia')
plt.plot(ind, df['KOR'], label='Korea')
plt.plot(ind, df['IND'], label='India')
plt.plot(ind, df['PRT'], label='Portugal')
plt.plot(ind, df['ISL'], label='Iceland')
plt.plot(ind, aver, label='Average')
plt.xticks(ind, df['Year'])
plt.ylim(10, 287)
plt.legend()
plt.xlabel('year')
plt.ylabel("Deaths / 1,000,000 inhabitants")
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('/precipitation_trend.csv')

ind = np.arange(len(df))
plt.bar(ind, df['spring'], width=0.5, label='spring')
plt.bar(ind, df['summer'], width=0.5, bottom=df['spring'], label='summer')
plt.bar(ind, df['fall'], width=0.5, bottom=(df['spring']+df['summer']), label='fall')
plt.bar(ind, df['winter'], width=0.5, bottom=(df['spring']+df['summer']+df['fall']), label='winter')
plt.xticks(ind, df['year'])
plt.ylabel('precipitation')
plt.xlabel('year')
plt.legend()
plt.show()

df['sum'] = df['spring']+df['summer']+df['fall']+df['winter']
ind = np.arange(len(df))
plt.plot(ind, df['sum'])
plt.ylim(0, 1600)
plt.xticks(ind, df['year'])
plt.ylabel('precipitation')
plt.xlabel('year')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from google.colab import drive
drive.mount('/content/gdrive')
df = pd.read_csv('/content/gdrive/My Drive/BMI.csv')
display(df)
df  = df.drop(['타임스탬프'],axis=1)
display(df)
df['bmi'] = df['몸무게']/((df['키']/100)*(df['키']/100))
display(df)
ind = np.arange(len(df))
a=[df['이름(영문)']]
for i in range(len(df)):
    plt.bar(ind, df['bmi'], width=0.5, label=(a[i])           
    plt.xticks(ind, a[i])
plt.ylabel('BMI')
plt.xlabel('Name')
plt.legend()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from google.colab import drive
drive.mount('/content/gdrive')
df = pd.read_csv('/content/gdrive/My Drive/BMI.csv')
display(df)
a=[df['이름(영문)']]
print(a)

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from google.colab import drive
drive.mount('/content/gdrive')
df = pd.read_csv('/content/gdrive/My Drive/BMI.csv')
df = df.drop(['타임스탬프'], axis=1)
display(df)
df['bmi'] = df['몸무게']/((df['키']/100)*(df['키']/100))
for index, row in df.iterrows():
    print(row['이름(영문)'], row['bmi'])

import matplotlib.pyplot as plt
a = [32, 20, 23]
b = [45, 60, 55]
plt.scatter(a, b)
plt.annotate('kim', xy=(32, 45), xytext=(5, -10), textcoords='offset points')
plt.annotate('lee', xy=(20, 60), xytext=(5, -10), textcoords='offset points')
plt.annotate('choi', xy=(23, 55), xytext=(5, -10), textcoords='offset points')
plt.xlim(15, 35)
plt.show()

from google.colab import drive
drive.mount('/content/gdrive')
df = pd.read_csv('/content/gdrive/My Drive/BMI.csv')
df = df.drop(['타임스탬프'], axis=1)
df['bmi'] = df['몸무게']/((df['키']/100.0)*(df['키']/100.0))
plt.scatter(df['몸무게'], df['키'])
for index, row in df.iterrows():
    plt.annotate(row['이름(영문)'], xy=(row['몸무게'], row['키']), xytext=(5, -10), textcoords='offset points')
plt.xlabel('weight')
plt.ylabel('height')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/gdrive')
df = pd.read_csv('/content/gdrive/My Drive/'
                 '자동차 에너지소비효율등급 인증 현황_180831.csv',
                 encoding='euc-kr')

display(df[:4]) # 데이터가 어떻게 생겼나 확인 (몇 개만)
print('전체 :', len(df)) # 데이터 수 확인


### 휘발유

df1 = df[df['유종'] == '휘발유'] # 유종이 휘발유인 것만 모음
print('휘발유 :', len(df1)) # 데이터 수 확인

x = df1['공차중량'].str.rstrip('kg').astype(float) # 단위를 제거하고 숫자로 변환
y = df1['복합연비'].str.rstrip('㎞/ℓ').astype(float)

plt.scatter(x, y, s=3, alpha=0.3, color='red', label='Gasoline') # 산점도를 그림 (s는 크기)


### 경유

df1 = df[df['유종'] == '경유']
print('경유 :', len(df1))

x = df1['공차중량'].str.rstrip('kg').astype(float)
y = df1['복합연비'].str.rstrip('㎞/ℓ').astype(float)

plt.scatter(x, y, s=3, alpha=0.3, color='blue', edgecolors='none', label='Diesel')


### LPG

df1 = df[df['유종'] == 'LPG']
print('LPG :', len(df1))

x = df1['공차중량'].str.rstrip('kg').astype(float)
y = df1['복합연비'].str.rstrip('㎞/ℓ').astype(float)
plt.scatter(x, y, s=3, alpha=0.3, color='green', label='LPG')

plt.legend()
plt.xlabel('Weight (kg)')
plt.ylabel('Fuel Efficiency (km/ℓ)')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/gdrive')
df = pd.read_csv('/content/gdrive/My Drive/NBA_players_by_season.csv')
display(df[:6])
display(df[19597:])
df = df.drop(['Age','BMI'], axis=1)
df0= df[df['Position'] == '0']
df1= df[df['Position'] == '1']
df2= df[df['Position'] == '2']
plt.scatter(df0['Height'], df0['Weight'], s=15, c='b', label='Guard')
plt.scatter(df1['Height'], df1['Weight'], s=15, c='r', label='Forward')
plt.scatter(df2['Height'], df2['Weight'], s=15, c='g', label='center')
plt.xlabel('Height')
plt.ylabel('Weight')
plt.xlim(160, 230)
plt.ylim(70, 150)
plt.legend()
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
# %config InlineBackend.figure_format='retina'
path = '/usr/share/fonts/truetype/nanum/NanumGothicBold.ttf'
import matplotlib.font_manager as fm
fontprop = fm.FontProperties(fname=path, size=12)

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import collections

from google.colab import auth
auth.authenticate_user()   # 사용자 인증
import gspread
from oauth2client.client import GoogleCredentials
gc = gspread.authorize(GoogleCredentials.get_application_default())  # 스프레드시트 사용 권한을 gc에 저장
worksheet = gc.open_by_url('https://docs.google.com/spreadsheets/d/18wY-0pzevZWUbcd1qC8oieRRdv8inNXMC_X24WkxxG8/edit#gid=2088075099').sheet1  # 스프레드시트를 오픈
rows = worksheet.get_all_values()  # 스프레드시트를 읽음(모든 셀의 값을 문자열 형식의 리스트의 리스트를 반환)
df = pd.DataFrame.from_records(rows[1:], columns=rows[0])

plt.figure(figsize=(20, 7))
plt.title('Brand')
hist = collections.Counter(df['브랜드'])
ind = np.arange(len(hist))
plt.bar(ind, hist.values(), width=0.5, color='red')
plt.xticks(ind, hist.keys(), fontproperties=fontprop)
plt.xlabel('Brand')
plt.ylabel('People')
plt.show()


plt.figure(figsize=(10, 7))
hist = collections.Counter(df['불매운동이 현재 상황 개선'])
ind = np.arange(len(hist))
plt.bar(ind, hist.values(), width=0.5, color ='Blue')
plt.xticks(ind, hist.keys(), fontproperties=fontprop)
plt.title('Improving')
plt.xlabel('Element')
plt.ylabel('People')
plt.show()


plt.figure(figsize=(40, 7))
hist = collections.Counter(df['우리의 대응'])
ind = np.arange(len(hist))
plt.bar(ind, hist.values(), width=0.5, color='green')
plt.xticks(ind, hist.keys(), fontproperties=fontprop)
plt.title('Coping')
plt.xlabel('Element')
plt.ylabel('People')
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
# %config InlineBackend.figure_format='retina'
path = '/usr/share/fonts/truetype/nanum/NanumGothicBold.ttf'
import matplotlib.font_manager as fm
fontprop = fm.FontProperties(fname=path, size=12)

# %matplotlib inline
# %config InlineBackend.figure_format='retina'
path = '/usr/share/fonts/truetype/nanum/NanumGothicBold.ttf'
import matplotlib.font_manager as fm
fontprop = fm.FontProperties(fname=path, size=12)

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import collections

from google.colab import auth
auth.authenticate_user()   # 사용자 인증
import gspread
from oauth2client.client import GoogleCredentials
gc = gspread.authorize(GoogleCredentials.get_application_default())  # 스프레드시트 사용 권한을 gc에 저장
worksheet = gc.open_by_url('https://docs.google.com/spreadsheets/d/1S-wBqmZWGla1TfSazA7lWfHU69jAR921UCEI3EjZX6c/edit#gid=782881987').sheet1  # 스프레드시트를 오픈
rows = worksheet.get_all_values()  # 스프레드시트를 읽음(모든 셀의 값을 문자열 형식의 리스트의 리스트를 반환)
df = pd.DataFrame.from_records(rows[1:], columns=rows[0])

df['bmi'] = df['몸무게'].astype(int)/((df['키'].astype(int)/100.0)*(df['키'].astype(int)/100.0))
df['판정'] = ['저체중' if bmi<18.5 else
           '정상' if bmi<23 else
           '과체중' if bmi<25 else
           '비만' if bmi<30 else
           '고도비만' if bmi<35 else
           '초고도비만'
           for bmi in df['bmi']]
display(df)

df0= df[df['성별'] == '남성']
df1= df[df['성별'] == '여성']
plt.scatter(df0['몸무게'].astype(int), df0['키'].astype(int), s=15, c='b', label='Men')
plt.scatter(df1['몸무게'].astype(int), df1['키'].astype(int), s=15, c='r', label='Women')
plt.legend()
plt.title('BMI')
plt.xlabel('Weight')
plt.ylabel('Height')
plt.show()

plt.figure(figsize=(10, 7))
hist = collections.Counter(df['bmi'].astype(float))
ind = np.arange(len(hist))
plt.bar(ind, hist.keys(), width=0.5, color ='blue')
plt.xticks(ind, df['이름'],fontproperties=fontprop)
plt.title('BMI')
plt.xlabel('Name')
plt.ylabel('BMI')
plt.show()

plt.figure(figsize=(10, 7))
hist = collections.Counter(df['판정'])
ind = np.arange(len(hist))
plt.bar(ind, hist.values(), width=0.5, color ='red')
plt.xticks(ind, hist.keys(), fontproperties=fontprop)
plt.title('BMI')
plt.xlabel('Category')
plt.ylabel('People')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import collections
from google.colab import drive
drive.mount('/content/gdrive')
df = pd.read_csv('/content/gdrive/My Drive/pl.csv')

display(df[['다룰 수 있는 언어 수?', '좋아하는 언어?']])

result = []
for index, row in df.iterrows():
  listtemp = row['좋아하는 언어?'].split(';')
  result.extend(listtemp)
hist = collections.Counter(df['좋아하는 언어?'])
ind = np.arange(len(hist))
plt.bar(ind, hist.values())
plt.xticks(ind, hist.keys())
plt.show()

xt = ['0', '1~2', '3~5', '6~']
co = [0, 0, 0, 0]
for x in df['다룰 수 있는 언어 수?']:
  if x == '0개':
    co[0] = co[0] + 1
  elif x == '1~2개':
    co[1] = co[1] + 1
  elif x == '3~5개':
    co[2] = co[2] + 1
  else:
    co[3] = co[3] + 1
ind = np.arange(len(xt))
plt.bar(ind, co)
plt.xticks(ind, xt)
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# 초기 셋팅

# %matplotlib inline
# %config InlineBackend.figure_format='retina'
path = '/usr/share/fonts/truetype/nanum/NanumGothicBold.ttf'
import matplotlib.font_manager as fm
fontprop = fm.FontProperties(fname=path, size=12)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/gdrive')
df = pd.read_csv('/content/gdrive/My Drive/planet.csv', encoding='euc-kr')

display(df)

result = 0

#몸무게 게산 프로그램
def Calc():
    planet = input('어떤 행성에서의 몸무게를 알고 싶으신가요?')
    if planet == '수성':
        p = int(input('현재 몸무게: '))
        result = p * 0.38
        print(planet,'에서의 몸무게: ',result,'Kg')
    elif planet == '금성':
        p1 = int(input('현재 몸무게: '))
        result1 = p1 * 0.91
        print(planet,'에서의 몸무게: ',result1,'Kg')
    elif planet == '지구':
        p2 = int(input('현재 몸무게: '))
        result2 = p2 * 1
        print(planet,'에서의 몸무게: ',result2,'Kg')
    elif planet == '화성':
        p3 = int(input('현재 몸무게: '))
        result3 = p3 * 0.38
        print(planet,'에서의 몸무게: ',result3,'Kg')    
    elif planet == '목성':
        p4 = int(input('현재 몸무게: '))
        result4 = p4 * 2.37
        print(planet,'에서의 몸무게: ',result4,'Kg')
    elif planet == '토성':
        p5 = int(input('현재 몸무게: '))
        result5 = p5 * 0.94
        print(planet,'에서의 몸무게: ',result5,'Kg')    
    elif planet == '천왕성':
        p6 = int(input('현재 몸무게: '))
        result6 = p6 * 0.89
        print(planet,'에서의 몸무게: ',result6,'Kg')    
    elif planet == '해왕성':
        p7 = int(input('현재 몸무게: '))
        result7 = p7 * 1.11
        print(planet,'에서의 몸무게: ',result7,'Kg')    
    else:
        print('행성 이름을 정확하게 입력하세요!')
        Calc()
    
    
    
print('\n<다른 행성에서의 몸무게를 알려드립니다!>\n')
Calc()

# 중력 그래프 구현    
plt.bar(ind, df['중력'], width=0.5, color ='red')
plt.xticks(ind, df['행성'], fontproperties=fontprop)
plt.title('중력', fontproperties=fontprop)
plt.xlabel('행성', fontproperties=fontprop)
plt.ylabel('중력(m/s**2)', fontproperties=fontprop)
plt.show()

# 적도 지름 그래프 구현
plt.bar(ind, df['적도 지름'], width=0.5, color ='orange')
plt.xticks(ind, df['행성'], fontproperties=fontprop)
plt.title('적도 지름', fontproperties=fontprop)
plt.xlabel('행성', fontproperties=fontprop)
plt.ylabel('적도 지름(Km)', fontproperties=fontprop)
plt.show()

# 부피 그래프 구현
plt.bar(ind, df['부피'], width=0.5, color ='yellow')
plt.xticks(ind, df['행성'], fontproperties=fontprop)
plt.title('부피', fontproperties=fontprop)
plt.xlabel('행성', fontproperties=fontprop)
plt.ylabel('부피(km**3)', fontproperties=fontprop)
plt.show()

# 확대 부피 그래프 구현
plt.bar(ind, df['부피'], width=0.5, color ='yellow')
plt.xticks(ind, df['행성'], fontproperties=fontprop)
plt.title('부피', fontproperties=fontprop)
plt.xlabel('행성', fontproperties=fontprop)
plt.ylabel('부피(km**3)', fontproperties=fontprop)
plt.ylim(0, 6.000000e+12)
plt.show()

# 질량 그래프 구현
plt.bar(ind, df['질량'], width=0.5, color ='green')
plt.xticks(ind, df['행성'], fontproperties=fontprop)
plt.title('질량', fontproperties=fontprop)
plt.xlabel('행성', fontproperties=fontprop)
plt.ylabel('질량 (지구=1)', fontproperties=fontprop)
plt.show()

# 확대 질량 그래프 구현
plt.bar(ind, df['질량'], width=0.5, color ='green')
plt.xticks(ind, df['행성'], fontproperties=fontprop)
plt.title('질량', fontproperties=fontprop)
plt.xlabel('행성', fontproperties=fontprop)
plt.ylabel('질량 (지구=1)', fontproperties=fontprop)
plt.ylim(0, 18)
plt.show()

# 적도 온도 그래프 구현
plt.bar(ind, df['적도 온도'], width=0.5, color ='blue')
plt.xticks(ind, df['행성'], fontproperties=fontprop)
plt.title('평균 온도', fontproperties=fontprop)
plt.xlabel('행성', fontproperties=fontprop)
plt.ylabel('온도(K)', fontproperties=fontprop)
plt.show()

# 부피에 따른 중력의 상관 관계 그래프 구현
plt.figure(figsize=(14, 7))
plt.scatter(df['부피'], df['중력'], s=20,c='r')
for index, row in df.iterrows():
    plt.annotate(row['행성'], xy=(row['부피'], row['중력']), xytext=(5,-10), textcoords='offset points', fontproperties=fontprop)
plt.xlabel('부피', fontproperties=fontprop)
plt.ylabel('중력', fontproperties=fontprop)
plt.title('부피에 따른 중력의 상관 관계', fontproperties=fontprop)
plt.show()

# Commented out IPython magic to ensure Python compatibility.

# %matplotlib inline
# %config InlineBackend.figure_format='retina'
path = '/usr/share/fonts/truetype/nanum/NanumGothicBold.ttf'
import matplotlib.font_manager as fm
fontprop = fm.FontProperties(fname=path, size=15)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/gdrive')
df = pd.read_csv('/content/gdrive/My Drive/Fan voice.csv', encoding='euc-kr')

ind = np.arange(len(df))

display(df)
#display(df['풍속'])

# 풍속 그래프 구현
plt.figure(figsize=(5, 3))
plt.bar(ind, df['소음'], width=0.35, color ='magenta',)
plt.xticks(ind, df['날개 수'], fontproperties=fontprop)
plt.title('소음', fontproperties=fontprop)
plt.xlabel('날개 수', fontproperties=fontprop)
plt.ylabel('소음(dBA)', fontproperties=fontprop)
plt.ylim(60, 72.0)
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
# %config InlineBackend.figure_format='retina'
path = '/usr/share/fonts/truetype/nanum/NanumGothicBold.ttf'
import matplotlib.font_manager as fm
fontprop = fm.FontProperties(fname=path, size=15)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/gdrive')
df = pd.read_csv('/content/gdrive/My Drive/Boat Fan.csv', encoding='euc-kr')

ind = np.arange(len(df))

display(df)
#display(df['풍속'])

# 풍속 그래프 구현
plt.figure(figsize=(5, 3))
plt.bar(ind, df['걸린 시간(평균값)'], width=0.35, color ='red',)
plt.xticks(ind, df['낼개 수'], fontproperties=fontprop)
plt.title('풍속', fontproperties=fontprop)
plt.xlabel('날개 수', fontproperties=fontprop)
plt.ylabel('걸린 시간(초)', fontproperties=fontprop)
plt.ylim(8, 10.0)
plt.show()

# Commented out IPython magic to ensure Python compatibility.

# %matplotlib inline
# %config InlineBackend.figure_format='retina'
path = '/usr/share/fonts/truetype/nanum/NanumGothicBold.ttf'
import matplotlib.font_manager as fm
fontprop = fm.FontProperties(fname=path, size=15)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/gdrive')
df = pd.read_csv('/content/gdrive/My Drive/Fan speed.csv', encoding='euc-kr')

ind = np.arange(len(df))

display(df)
#display(df['풍속'])

# 풍속 그래프 구현
plt.figure(figsize=(5, 3))
plt.bar(ind, df['풍속'], width=0.35, color ='blue',)
plt.xticks(ind, df['날개 수'], fontproperties=fontprop)
plt.title('풍속', fontproperties=fontprop)
plt.xlabel('날개 수', fontproperties=fontprop)
plt.ylabel('풍속(m/s)', fontproperties=fontprop)
plt.ylim(3, 4.0)
plt.show()

"""%matplotlib inline

%config InlineBackend.figure_format='retina'
path = '/usr/share/fonts/truetype/nanum/NanumGothicBold.ttf'
import matplotlib.font_manager as fm
fontprop = fm.FontProperties(fname=path, size=12)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/gdrive')
df = pd.read_csv('/content/gdrive/My Drive/planet.csv', encoding='euc-kr')

display(df)


# 질량 그래프 구현
plt.bar(ind, df['질량'], width=0.5, color ='green')
plt.xticks(ind, df['행성'], fontproperties=fontprop)
plt.title('질량', fontproperties=fontprop)
plt.xlabel('행성', fontproperties=fontprop)
plt.ylabel('질량 (지구=1)', fontproperties=fontprop)
plt.show()
"""

# Commented out IPython magic to ensure Python compatibility.
"""
!apt-get install fonts-nanum*
!apt-get install fontconfig
!fc-cache -fv
!cp /usr/share/fonts/truetype/nanum/Nanum* /usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/
!rm -rf /content/.cache/matplotlib/*
"""

# %matplotlib inline
# %config InlineBackend.figure_format='retina'
path = '/usr/share/fonts/truetype/nanum/NanumGothicBold.ttf'

from google.colab import drive
drive.mount('/content/gdrive')
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
fontprop = fm.FontProperties(fname=path, size=15)

df1 = pd.read_csv('/content/gdrive/My Drive/Boat Fan.csv', encoding='euc-kr')
df2 = pd.read_csv('/content/gdrive/My Drive/Fan speed.csv', encoding='euc-kr')
df3 = pd.read_csv('/content/gdrive/My Drive/Fan voice.csv', encoding='euc-kr')

display(df1)
display(df2)
display(df3)


ind = np.arange(len(df1))
plt.plot(ind, df1['걸린 시간(평균값)'])
plt.plot(ind, df2['풍속'])
plt.plot(ind, df3['소음'])
plt.ylim(3.5, 9.8)
plt.xticks(ind, df1['낼개 수'])
plt.ylabel('풍속')
plt.xlabel('날개 수', fontproperties=fontprop)

plt.figure(figsize=(5, 10))
ind = np.arange(len(df1))

plt.bar(ind, df1['걸린 시간(평균값)'], width=0.5, label='Boat speed(Time)',color = 'r')
plt.bar(ind, df2['풍속'], width=0.5, label='fan speed(m/s))', color = 'b')
plt.bar(ind, df3['소음'], width=0.5, bottom=(df2['풍속']+df1['걸린 시간(평균값)']), label='noise')
plt.plot(ind, df1['걸린 시간(평균값)'],linewidth = 3, color = 'black')
plt.plot(ind, df2['풍속'], linewidth = 3, color = 'black')
plt.xticks(ind, df1['낼개 수'])
plt.ylabel('풍속', fontproperties=fontprop)
plt.xlabel('날개 수', fontproperties=fontprop)
plt.ylim(3, 10)
plt.legend()
plt.show()

plt.figure(figsize=(5, 10))
plt.bar(ind, df3['소음'], width=0.5, label='noise', color = 'magenta')
plt.bar(ind, df1['걸린 시간(평균값)'], width=0.5, label='Boat speed(Time)',color = 'r')
plt.bar(ind, df2['풍속'], width=0.5, label='fan speed(m/s))', color = 'b')
plt.plot(ind, df1['걸린 시간(평균값)'],linewidth = 3, color = 'black')
plt.plot(ind, df2['풍속'], linewidth = 3, color = 'black')
plt.plot(ind, df3['소음'], linewidth = 3, color = 'black')
plt.xticks(ind, df1['낼개 수'])
plt.ylabel('풍속 과 소음', fontproperties=fontprop)
plt.xlabel('날개 수', fontproperties=fontprop)
plt.legend()
plt.show()

from google.colab import drive
drive.mount('/content/drive')